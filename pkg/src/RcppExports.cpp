// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// UpdateDenom
double UpdateDenom(double alpha, IntegerVector nwordtable);
RcppExport SEXP IPTM_UpdateDenom(SEXP alphaSEXP, SEXP nwordtableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nwordtable(nwordtableSEXP);
    rcpp_result_gen = Rcpp::wrap(UpdateDenom(alpha, nwordtable));
    return rcpp_result_gen;
END_RCPP
}
// UpdateNum
NumericVector UpdateNum(NumericVector vec, List nKwordtable);
RcppExport SEXP IPTM_UpdateNum(SEXP vecSEXP, SEXP nKwordtableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< List >::type nKwordtable(nKwordtableSEXP);
    rcpp_result_gen = Rcpp::wrap(UpdateNum(vec, nKwordtable));
    return rcpp_result_gen;
END_RCPP
}
// SortedZ
List SortedZ(int nIP, IntegerVector currentC, List currentZ);
RcppExport SEXP IPTM_SortedZ(SEXP nIPSEXP, SEXP currentCSEXP, SEXP currentZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nIP(nIPSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type currentC(currentCSEXP);
    Rcpp::traits::input_parameter< List >::type currentZ(currentZSEXP);
    rcpp_result_gen = Rcpp::wrap(SortedZ(nIP, currentC, currentZ));
    return rcpp_result_gen;
END_RCPP
}
// SortedC
List SortedC(int nIP, IntegerVector currentC, List edge);
RcppExport SEXP IPTM_SortedC(SEXP nIPSEXP, SEXP currentCSEXP, SEXP edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nIP(nIPSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type currentC(currentCSEXP);
    Rcpp::traits::input_parameter< List >::type edge(edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(SortedC(nIP, currentC, edge));
    return rcpp_result_gen;
END_RCPP
}
// MultiplyXB
NumericVector MultiplyXB(NumericMatrix X, NumericVector beta);
RcppExport SEXP IPTM_MultiplyXB(SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(MultiplyXB(X, beta));
    return rcpp_result_gen;
END_RCPP
}
// MultiplyXBList
NumericMatrix MultiplyXBList(List X, NumericVector beta);
RcppExport SEXP IPTM_MultiplyXBList(SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(MultiplyXBList(X, beta));
    return rcpp_result_gen;
END_RCPP
}
// BetaInEqB
NumericVector BetaInEqB(int nIP, List lambdamat, List edgebyC);
RcppExport SEXP IPTM_BetaInEqB(SEXP nIPSEXP, SEXP lambdamatSEXP, SEXP edgebyCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nIP(nIPSEXP);
    Rcpp::traits::input_parameter< List >::type lambdamat(lambdamatSEXP);
    Rcpp::traits::input_parameter< List >::type edgebyC(edgebyCSEXP);
    rcpp_result_gen = Rcpp::wrap(BetaInEqB(nIP, lambdamat, edgebyC));
    return rcpp_result_gen;
END_RCPP
}
// Timediff
NumericMatrix Timediff(List edge, IntegerVector node, double when, double lambda);
RcppExport SEXP IPTM_Timediff(SEXP edgeSEXP, SEXP nodeSEXP, SEXP whenSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type edge(edgeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< double >::type when(whenSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(Timediff(edge, node, when, lambda));
    return rcpp_result_gen;
END_RCPP
}
// Dyadic
NumericMatrix Dyadic(NumericMatrix history, IntegerVector node, int sender);
RcppExport SEXP IPTM_Dyadic(SEXP historySEXP, SEXP nodeSEXP, SEXP senderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type history(historySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< int >::type sender(senderSEXP);
    rcpp_result_gen = Rcpp::wrap(Dyadic(history, node, sender));
    return rcpp_result_gen;
END_RCPP
}
// Triadic
NumericMatrix Triadic(NumericMatrix history, IntegerVector node, int sender);
RcppExport SEXP IPTM_Triadic(SEXP historySEXP, SEXP nodeSEXP, SEXP senderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type history(historySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< int >::type sender(senderSEXP);
    rcpp_result_gen = Rcpp::wrap(Triadic(history, node, sender));
    return rcpp_result_gen;
END_RCPP
}
// Degree
NumericMatrix Degree(NumericMatrix history, IntegerVector node, int sender);
RcppExport SEXP IPTM_Degree(SEXP historySEXP, SEXP nodeSEXP, SEXP senderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type history(historySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< int >::type sender(senderSEXP);
    rcpp_result_gen = Rcpp::wrap(Degree(history, node, sender));
    return rcpp_result_gen;
END_RCPP
}
// WordInEqZ
NumericMatrix WordInEqZ(int K, IntegerVector textlistd, List tableW, double beta, NumericVector nvec);
RcppExport SEXP IPTM_WordInEqZ(SEXP KSEXP, SEXP textlistdSEXP, SEXP tableWSEXP, SEXP betaSEXP, SEXP nvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type textlistd(textlistdSEXP);
    Rcpp::traits::input_parameter< List >::type tableW(tableWSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nvec(nvecSEXP);
    rcpp_result_gen = Rcpp::wrap(WordInEqZ(K, textlistd, tableW, beta, nvec));
    return rcpp_result_gen;
END_RCPP
}
// tabulateC
IntegerVector tabulateC(const IntegerVector& x, const unsigned max);
RcppExport SEXP IPTM_tabulateC(SEXP xSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(tabulateC(x, max));
    return rcpp_result_gen;
END_RCPP
}
// logWZ
double logWZ(int nIP, int K, IntegerVector currentC, List currentZ, List textlist, List tableW, NumericVector alpha, NumericMatrix mvec, double beta, NumericVector nvec);
RcppExport SEXP IPTM_logWZ(SEXP nIPSEXP, SEXP KSEXP, SEXP currentCSEXP, SEXP currentZSEXP, SEXP textlistSEXP, SEXP tableWSEXP, SEXP alphaSEXP, SEXP mvecSEXP, SEXP betaSEXP, SEXP nvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nIP(nIPSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type currentC(currentCSEXP);
    Rcpp::traits::input_parameter< List >::type currentZ(currentZSEXP);
    Rcpp::traits::input_parameter< List >::type textlist(textlistSEXP);
    Rcpp::traits::input_parameter< List >::type tableW(tableWSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mvec(mvecSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nvec(nvecSEXP);
    rcpp_result_gen = Rcpp::wrap(logWZ(nIP, K, currentC, currentZ, textlist, tableW, alpha, mvec, beta, nvec));
    return rcpp_result_gen;
END_RCPP
}
