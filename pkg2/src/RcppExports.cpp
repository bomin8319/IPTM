// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// Mahalanobis
arma::vec Mahalanobis(arma::mat x, arma::rowvec center, arma::mat cov);
RcppExport SEXP _IPTMnew_Mahalanobis(SEXP xSEXP, SEXP centerSEXP, SEXP covSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type center(centerSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov(covSEXP);
    rcpp_result_gen = Rcpp::wrap(Mahalanobis(x, center, cov));
    return rcpp_result_gen;
END_RCPP
}
// ei
arma::vec ei(arma::mat M);
RcppExport SEXP _IPTMnew_ei(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(ei(M));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm_arma
arma::vec dmvnorm_arma(arma::mat x, arma::rowvec mean, arma::mat sigma);
RcppExport SEXP _IPTMnew_dmvnorm_arma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_arma(x, mean, sigma));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm_arma
arma::mat rmvnorm_arma(int n, const arma::vec& mu, const arma::mat& Sigma);
RcppExport SEXP _IPTMnew_rmvnorm_arma(SEXP nSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm_arma(n, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// priorsum
double priorsum(arma::mat var, arma::rowvec mu, arma::mat x);
RcppExport SEXP _IPTMnew_priorsum(SEXP varSEXP, SEXP muSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type var(varSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(priorsum(var, mu, x));
    return rcpp_result_gen;
END_RCPP
}
// tabulateC
IntegerVector tabulateC(const IntegerVector& x, const signed max);
RcppExport SEXP _IPTMnew_tabulateC(SEXP xSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const signed >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(tabulateC(x, max));
    return rcpp_result_gen;
END_RCPP
}
// transpose
arma::mat transpose(arma::mat x);
RcppExport SEXP _IPTMnew_transpose(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(transpose(x));
    return rcpp_result_gen;
END_RCPP
}
// callRMultinom
IntegerVector callRMultinom(NumericVector x);
RcppExport SEXP _IPTMnew_callRMultinom(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(callRMultinom(x));
    return rcpp_result_gen;
END_RCPP
}
// multinom_vec
IntegerVector multinom_vec(int nSample, NumericVector props);
RcppExport SEXP _IPTMnew_multinom_vec(SEXP nSampleSEXP, SEXP propsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nSample(nSampleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type props(propsSEXP);
    rcpp_result_gen = Rcpp::wrap(multinom_vec(nSample, props));
    return rcpp_result_gen;
END_RCPP
}
// which_int
int which_int(int value, IntegerVector x);
RcppExport SEXP _IPTMnew_which_int(SEXP valueSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type value(valueSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(which_int(value, x));
    return rcpp_result_gen;
END_RCPP
}
// which_num
int which_num(double value, NumericVector x);
RcppExport SEXP _IPTMnew_which_num(SEXP valueSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(which_num(value, x));
    return rcpp_result_gen;
END_RCPP
}
// rdirichlet_cpp
NumericMatrix rdirichlet_cpp(int num_samples, NumericVector alpha_m);
RcppExport SEXP _IPTMnew_rdirichlet_cpp(SEXP num_samplesSEXP, SEXP alpha_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_samples(num_samplesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha_m(alpha_mSEXP);
    rcpp_result_gen = Rcpp::wrap(rdirichlet_cpp(num_samples, alpha_m));
    return rcpp_result_gen;
END_RCPP
}
// which_cpp
IntegerVector which_cpp(int value, NumericVector x);
RcppExport SEXP _IPTMnew_which_cpp(SEXP valueSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type value(valueSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(which_cpp(value, x));
    return rcpp_result_gen;
END_RCPP
}
// expconst
NumericVector expconst(NumericVector consts);
RcppExport SEXP _IPTMnew_expconst(SEXP constsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type consts(constsSEXP);
    rcpp_result_gen = Rcpp::wrap(expconst(consts));
    return rcpp_result_gen;
END_RCPP
}
// History
List History(List edge, NumericVector timestamps, IntegerVector cd, int A, int d, double timeunit);
RcppExport SEXP _IPTMnew_History(SEXP edgeSEXP, SEXP timestampsSEXP, SEXP cdSEXP, SEXP ASEXP, SEXP dSEXP, SEXP timeunitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type edge(edgeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timestamps(timestampsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cd(cdSEXP);
    Rcpp::traits::input_parameter< int >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type timeunit(timeunitSEXP);
    rcpp_result_gen = Rcpp::wrap(History(edge, timestamps, cd, A, d, timeunit));
    return rcpp_result_gen;
END_RCPP
}
// History2
List History2(List edge, NumericVector timestamps, IntegerVector cd, int A, IntegerMatrix timeintd, double timeunit);
RcppExport SEXP _IPTMnew_History2(SEXP edgeSEXP, SEXP timestampsSEXP, SEXP cdSEXP, SEXP ASEXP, SEXP timeintdSEXP, SEXP timeunitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type edge(edgeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timestamps(timestampsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cd(cdSEXP);
    Rcpp::traits::input_parameter< int >::type A(ASEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type timeintd(timeintdSEXP);
    Rcpp::traits::input_parameter< double >::type timeunit(timeunitSEXP);
    rcpp_result_gen = Rcpp::wrap(History2(edge, timestamps, cd, A, timeintd, timeunit));
    return rcpp_result_gen;
END_RCPP
}
// Degree
NumericMatrix Degree(List history, int A, int sender);
RcppExport SEXP _IPTMnew_Degree(SEXP historySEXP, SEXP ASEXP, SEXP senderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type history(historySEXP);
    Rcpp::traits::input_parameter< int >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type sender(senderSEXP);
    rcpp_result_gen = Rcpp::wrap(Degree(history, A, sender));
    return rcpp_result_gen;
END_RCPP
}
// Outdegree
NumericMatrix Outdegree(IntegerMatrix timeintd, IntegerVector cd, IntegerVector senders, int A);
RcppExport SEXP _IPTMnew_Outdegree(SEXP timeintdSEXP, SEXP cdSEXP, SEXP sendersSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type timeintd(timeintdSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cd(cdSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type senders(sendersSEXP);
    Rcpp::traits::input_parameter< int >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(Outdegree(timeintd, cd, senders, A));
    return rcpp_result_gen;
END_RCPP
}
// Indegree
NumericMatrix Indegree(List history, int A, int sender);
RcppExport SEXP _IPTMnew_Indegree(SEXP historySEXP, SEXP ASEXP, SEXP senderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type history(historySEXP);
    Rcpp::traits::input_parameter< int >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type sender(senderSEXP);
    rcpp_result_gen = Rcpp::wrap(Indegree(history, A, sender));
    return rcpp_result_gen;
END_RCPP
}
// Dyadic
IntegerMatrix Dyadic(List history, int A, int sender);
RcppExport SEXP _IPTMnew_Dyadic(SEXP historySEXP, SEXP ASEXP, SEXP senderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type history(historySEXP);
    Rcpp::traits::input_parameter< int >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type sender(senderSEXP);
    rcpp_result_gen = Rcpp::wrap(Dyadic(history, A, sender));
    return rcpp_result_gen;
END_RCPP
}
// Triadic
NumericMatrix Triadic(List history, int A, int sender);
RcppExport SEXP _IPTMnew_Triadic(SEXP historySEXP, SEXP ASEXP, SEXP senderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type history(historySEXP);
    Rcpp::traits::input_parameter< int >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type sender(senderSEXP);
    rcpp_result_gen = Rcpp::wrap(Triadic(history, A, sender));
    return rcpp_result_gen;
END_RCPP
}
// Netstats_cpp
List Netstats_cpp(List edge, NumericVector timestamps, IntegerMatrix timeintd, IntegerVector senders, IntegerVector cd, int A, int d, double timeunit, IntegerVector netstat);
RcppExport SEXP _IPTMnew_Netstats_cpp(SEXP edgeSEXP, SEXP timestampsSEXP, SEXP timeintdSEXP, SEXP sendersSEXP, SEXP cdSEXP, SEXP ASEXP, SEXP dSEXP, SEXP timeunitSEXP, SEXP netstatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type edge(edgeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timestamps(timestampsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type timeintd(timeintdSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type senders(sendersSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cd(cdSEXP);
    Rcpp::traits::input_parameter< int >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type timeunit(timeunitSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type netstat(netstatSEXP);
    rcpp_result_gen = Rcpp::wrap(Netstats_cpp(edge, timestamps, timeintd, senders, cd, A, d, timeunit, netstat));
    return rcpp_result_gen;
END_RCPP
}
// inner
double inner(arma::vec x, arma::vec y);
RcppExport SEXP _IPTMnew_inner(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(inner(x, y));
    return rcpp_result_gen;
END_RCPP
}
// MultiplyXB
arma::mat MultiplyXB(List X, arma::vec B);
RcppExport SEXP _IPTMnew_MultiplyXB(SEXP XSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(MultiplyXB(X, B));
    return rcpp_result_gen;
END_RCPP
}
// TopicWord
NumericVector TopicWord(int K, NumericVector tabledk, NumericVector tableWd, NumericVector tableCd, NumericVector tablek, int N, NumericVector alphas, double beta, int V);
RcppExport SEXP _IPTMnew_TopicWord(SEXP KSEXP, SEXP tabledkSEXP, SEXP tableWdSEXP, SEXP tableCdSEXP, SEXP tablekSEXP, SEXP NSEXP, SEXP alphasSEXP, SEXP betaSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tabledk(tabledkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tableWd(tableWdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tableCd(tableCdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tablek(tablekSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(TopicWord(K, tabledk, tableWd, tableCd, tablek, N, alphas, beta, V));
    return rcpp_result_gen;
END_RCPP
}
// TopicWord0
NumericVector TopicWord0(int K, NumericVector tableCd, NumericVector tablek, int N, NumericVector alphas, double beta, int V);
RcppExport SEXP _IPTMnew_TopicWord0(SEXP KSEXP, SEXP tableCdSEXP, SEXP tablekSEXP, SEXP NSEXP, SEXP alphasSEXP, SEXP betaSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tableCd(tableCdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tablek(tablekSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(TopicWord0(K, tableCd, tablek, N, alphas, beta, V));
    return rcpp_result_gen;
END_RCPP
}
// Topicpart
double Topicpart(int K, IntegerVector z_d, NumericVector tableCd, NumericVector tablek, NumericVector alphas);
RcppExport SEXP _IPTMnew_Topicpart(SEXP KSEXP, SEXP z_dSEXP, SEXP tableCdSEXP, SEXP tablekSEXP, SEXP alphasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z_d(z_dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tableCd(tableCdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tablek(tablekSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alphas(alphasSEXP);
    rcpp_result_gen = Rcpp::wrap(Topicpart(K, z_d, tableCd, tablek, alphas));
    return rcpp_result_gen;
END_RCPP
}
// lmultinom
int lmultinom(NumericVector lprops);
RcppExport SEXP _IPTMnew_lmultinom(SEXP lpropsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lprops(lpropsSEXP);
    rcpp_result_gen = Rcpp::wrap(lmultinom(lprops));
    return rcpp_result_gen;
END_RCPP
}
// u_Gibbs
NumericVector u_Gibbs(NumericVector u_di, NumericVector lambda_di, double delta, int j);
RcppExport SEXP _IPTMnew_u_Gibbs(SEXP u_diSEXP, SEXP lambda_diSEXP, SEXP deltaSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u_di(u_diSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_di(lambda_diSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(u_Gibbs(u_di, lambda_di, delta, j));
    return rcpp_result_gen;
END_RCPP
}
// Edgepart
double Edgepart(arma::mat u, arma::mat lambda, double delta);
RcppExport SEXP _IPTMnew_Edgepart(SEXP uSEXP, SEXP lambdaSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(Edgepart(u, lambda, delta));
    return rcpp_result_gen;
END_RCPP
}
// Edgepartsum
double Edgepartsum(List X, arma::vec B, arma::mat u, double delta);
RcppExport SEXP _IPTMnew_Edgepartsum(SEXP XSEXP, SEXP BSEXP, SEXP uSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(Edgepartsum(X, B, u, delta));
    return rcpp_result_gen;
END_RCPP
}
// mu_vec
NumericVector mu_vec(NumericVector timemat, int A, NumericVector eta);
RcppExport SEXP _IPTMnew_mu_vec(SEXP timematSEXP, SEXP ASEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type timemat(timematSEXP);
    Rcpp::traits::input_parameter< int >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(mu_vec(timemat, A, eta));
    return rcpp_result_gen;
END_RCPP
}
// mu_mat
NumericMatrix mu_mat(NumericMatrix timemat, int A, NumericMatrix eta, IntegerVector cd);
RcppExport SEXP _IPTMnew_mu_mat(SEXP timematSEXP, SEXP ASEXP, SEXP etaSEXP, SEXP cdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type timemat(timematSEXP);
    Rcpp::traits::input_parameter< int >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cd(cdSEXP);
    rcpp_result_gen = Rcpp::wrap(mu_mat(timemat, A, eta, cd));
    return rcpp_result_gen;
END_RCPP
}
// Timepart
double Timepart(NumericVector mu, double sigma_tau, double a_d, double t_d);
RcppExport SEXP _IPTMnew_Timepart(SEXP muSEXP, SEXP sigma_tauSEXP, SEXP a_dSEXP, SEXP t_dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_tau(sigma_tauSEXP);
    Rcpp::traits::input_parameter< double >::type a_d(a_dSEXP);
    Rcpp::traits::input_parameter< double >::type t_d(t_dSEXP);
    rcpp_result_gen = Rcpp::wrap(Timepart(mu, sigma_tau, a_d, t_d));
    return rcpp_result_gen;
END_RCPP
}
// Timepartsum
double Timepartsum(NumericMatrix mumat, double sigma_tau, IntegerVector senders, NumericVector timestamps);
RcppExport SEXP _IPTMnew_Timepartsum(SEXP mumatSEXP, SEXP sigma_tauSEXP, SEXP sendersSEXP, SEXP timestampsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mumat(mumatSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_tau(sigma_tauSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type senders(sendersSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timestamps(timestampsSEXP);
    rcpp_result_gen = Rcpp::wrap(Timepartsum(mumat, sigma_tau, senders, timestamps));
    return rcpp_result_gen;
END_RCPP
}
// timefinder
List timefinder(NumericVector timestamps, IntegerVector edgetrim, double timeunit);
RcppExport SEXP _IPTMnew_timefinder(SEXP timestampsSEXP, SEXP edgetrimSEXP, SEXP timeunitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type timestamps(timestampsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type edgetrim(edgetrimSEXP);
    Rcpp::traits::input_parameter< double >::type timeunit(timeunitSEXP);
    rcpp_result_gen = Rcpp::wrap(timefinder(timestamps, edgetrim, timeunit));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_IPTMnew_Mahalanobis", (DL_FUNC) &_IPTMnew_Mahalanobis, 3},
    {"_IPTMnew_ei", (DL_FUNC) &_IPTMnew_ei, 1},
    {"_IPTMnew_dmvnorm_arma", (DL_FUNC) &_IPTMnew_dmvnorm_arma, 3},
    {"_IPTMnew_rmvnorm_arma", (DL_FUNC) &_IPTMnew_rmvnorm_arma, 3},
    {"_IPTMnew_priorsum", (DL_FUNC) &_IPTMnew_priorsum, 3},
    {"_IPTMnew_tabulateC", (DL_FUNC) &_IPTMnew_tabulateC, 2},
    {"_IPTMnew_transpose", (DL_FUNC) &_IPTMnew_transpose, 1},
    {"_IPTMnew_callRMultinom", (DL_FUNC) &_IPTMnew_callRMultinom, 1},
    {"_IPTMnew_multinom_vec", (DL_FUNC) &_IPTMnew_multinom_vec, 2},
    {"_IPTMnew_which_int", (DL_FUNC) &_IPTMnew_which_int, 2},
    {"_IPTMnew_which_num", (DL_FUNC) &_IPTMnew_which_num, 2},
    {"_IPTMnew_rdirichlet_cpp", (DL_FUNC) &_IPTMnew_rdirichlet_cpp, 2},
    {"_IPTMnew_which_cpp", (DL_FUNC) &_IPTMnew_which_cpp, 2},
    {"_IPTMnew_expconst", (DL_FUNC) &_IPTMnew_expconst, 1},
    {"_IPTMnew_History", (DL_FUNC) &_IPTMnew_History, 6},
    {"_IPTMnew_History2", (DL_FUNC) &_IPTMnew_History2, 6},
    {"_IPTMnew_Degree", (DL_FUNC) &_IPTMnew_Degree, 3},
    {"_IPTMnew_Outdegree", (DL_FUNC) &_IPTMnew_Outdegree, 4},
    {"_IPTMnew_Indegree", (DL_FUNC) &_IPTMnew_Indegree, 3},
    {"_IPTMnew_Dyadic", (DL_FUNC) &_IPTMnew_Dyadic, 3},
    {"_IPTMnew_Triadic", (DL_FUNC) &_IPTMnew_Triadic, 3},
    {"_IPTMnew_Netstats_cpp", (DL_FUNC) &_IPTMnew_Netstats_cpp, 9},
    {"_IPTMnew_inner", (DL_FUNC) &_IPTMnew_inner, 2},
    {"_IPTMnew_MultiplyXB", (DL_FUNC) &_IPTMnew_MultiplyXB, 2},
    {"_IPTMnew_TopicWord", (DL_FUNC) &_IPTMnew_TopicWord, 9},
    {"_IPTMnew_TopicWord0", (DL_FUNC) &_IPTMnew_TopicWord0, 7},
    {"_IPTMnew_Topicpart", (DL_FUNC) &_IPTMnew_Topicpart, 5},
    {"_IPTMnew_lmultinom", (DL_FUNC) &_IPTMnew_lmultinom, 1},
    {"_IPTMnew_u_Gibbs", (DL_FUNC) &_IPTMnew_u_Gibbs, 4},
    {"_IPTMnew_Edgepart", (DL_FUNC) &_IPTMnew_Edgepart, 3},
    {"_IPTMnew_Edgepartsum", (DL_FUNC) &_IPTMnew_Edgepartsum, 4},
    {"_IPTMnew_mu_vec", (DL_FUNC) &_IPTMnew_mu_vec, 3},
    {"_IPTMnew_mu_mat", (DL_FUNC) &_IPTMnew_mu_mat, 4},
    {"_IPTMnew_Timepart", (DL_FUNC) &_IPTMnew_Timepart, 4},
    {"_IPTMnew_Timepartsum", (DL_FUNC) &_IPTMnew_Timepartsum, 4},
    {"_IPTMnew_timefinder", (DL_FUNC) &_IPTMnew_timefinder, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_IPTMnew(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
