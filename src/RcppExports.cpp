// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// logPLC
double logPLC(List finalZ, List zcnew, IntegerVector currentC, List tableW, List corpusW, List textlist, double alpha, NumericVector mvec, double delta, NumericVector nvec);
RcppExport SEXP IPTM_logPLC(SEXP finalZSEXP, SEXP zcnewSEXP, SEXP currentCSEXP, SEXP tableWSEXP, SEXP corpusWSEXP, SEXP textlistSEXP, SEXP alphaSEXP, SEXP mvecSEXP, SEXP deltaSEXP, SEXP nvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type finalZ(finalZSEXP);
    Rcpp::traits::input_parameter< List >::type zcnew(zcnewSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type currentC(currentCSEXP);
    Rcpp::traits::input_parameter< List >::type tableW(tableWSEXP);
    Rcpp::traits::input_parameter< List >::type corpusW(corpusWSEXP);
    Rcpp::traits::input_parameter< List >::type textlist(textlistSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mvec(mvecSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nvec(nvecSEXP);
    rcpp_result_gen = Rcpp::wrap(logPLC(finalZ, zcnew, currentC, tableW, corpusW, textlist, alpha, mvec, delta, nvec));
    return rcpp_result_gen;
END_RCPP
}
// Supdate
double Supdate(double alpha, IntegerVector ctable);
RcppExport SEXP IPTM_Supdate(SEXP alphaSEXP, SEXP ctableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ctable(ctableSEXP);
    rcpp_result_gen = Rcpp::wrap(Supdate(alpha, ctable));
    return rcpp_result_gen;
END_RCPP
}
// Skupdate
NumericVector Skupdate(NumericVector vec, List cktable);
RcppExport SEXP IPTM_Skupdate(SEXP vecSEXP, SEXP cktableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< List >::type cktable(cktableSEXP);
    rcpp_result_gen = Rcpp::wrap(Skupdate(vec, cktable));
    return rcpp_result_gen;
END_RCPP
}
// currentZ2
List currentZ2(int c, IntegerVector currentClist, List currentZ);
RcppExport SEXP IPTM_currentZ2(SEXP cSEXP, SEXP currentClistSEXP, SEXP currentZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type currentClist(currentClistSEXP);
    Rcpp::traits::input_parameter< List >::type currentZ(currentZSEXP);
    rcpp_result_gen = Rcpp::wrap(currentZ2(c, currentClist, currentZ));
    return rcpp_result_gen;
END_RCPP
}
// finalZ2
List finalZ2(IntegerVector currentC, List currentZ);
RcppExport SEXP IPTM_finalZ2(SEXP currentCSEXP, SEXP currentZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type currentC(currentCSEXP);
    Rcpp::traits::input_parameter< List >::type currentZ(currentZSEXP);
    rcpp_result_gen = Rcpp::wrap(finalZ2(currentC, currentZ));
    return rcpp_result_gen;
END_RCPP
}
// allxmatC
NumericMatrix allxmatC(NumericMatrix edge, List pre, int i, IntegerVector A);
RcppExport SEXP IPTM_allxmatC(SEXP edgeSEXP, SEXP preSEXP, SEXP iSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type edge(edgeSEXP);
    Rcpp::traits::input_parameter< List >::type pre(preSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(allxmatC(edge, pre, i, A));
    return rcpp_result_gen;
END_RCPP
}
// allxmat
NumericMatrix allxmat(NumericMatrix edge, IntegerVector node, List histlist, int sender, double lambda);
RcppExport SEXP IPTM_allxmat(SEXP edgeSEXP, SEXP nodeSEXP, SEXP histlistSEXP, SEXP senderSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type edge(edgeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< List >::type histlist(histlistSEXP);
    Rcpp::traits::input_parameter< int >::type sender(senderSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(allxmat(edge, node, histlist, sender, lambda));
    return rcpp_result_gen;
END_RCPP
}
// sortedZ
List sortedZ(int nIP, IntegerVector currentC, List currentZ);
RcppExport SEXP IPTM_sortedZ(SEXP nIPSEXP, SEXP currentCSEXP, SEXP currentZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nIP(nIPSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type currentC(currentCSEXP);
    Rcpp::traits::input_parameter< List >::type currentZ(currentZSEXP);
    rcpp_result_gen = Rcpp::wrap(sortedZ(nIP, currentC, currentZ));
    return rcpp_result_gen;
END_RCPP
}
// finalZ
List finalZ(IntegerVector currentC, List currentZ);
RcppExport SEXP IPTM_finalZ(SEXP currentCSEXP, SEXP currentZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type currentC(currentCSEXP);
    Rcpp::traits::input_parameter< List >::type currentZ(currentZSEXP);
    rcpp_result_gen = Rcpp::wrap(finalZ(currentC, currentZ));
    return rcpp_result_gen;
END_RCPP
}
// multiplyXB
NumericVector multiplyXB(NumericMatrix allxmatlist, NumericVector beta);
RcppExport SEXP IPTM_multiplyXB(SEXP allxmatlistSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type allxmatlist(allxmatlistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(multiplyXB(allxmatlist, beta));
    return rcpp_result_gen;
END_RCPP
}
